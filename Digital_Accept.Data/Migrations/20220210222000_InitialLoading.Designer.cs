// <auto-generated />
using System;
using Digital_Accept.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Digital_Accept.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220210222000_InitialLoading")]
    partial class InitialLoading
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateHourCriation")
                        .HasColumnType("datetime")
                        .HasColumnName("DateHourCriation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateHourEvent")
                        .HasColumnType("datetime")
                        .HasColumnName("DateHourEvent");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<int>("EventType")
                        .HasColumnType("int")
                        .HasColumnName("EventType");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Signatary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Signatary", (string)null);
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.SignataryDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SignataryId")
                        .HasColumnType("bigint");

                    b.Property<int>("SignataryType")
                        .HasColumnType("int")
                        .HasColumnName("SignataryType");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SignataryId");

                    b.ToTable("SignataryDocument", (string)null);
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Signature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateHourRegister")
                        .HasColumnType("datetime")
                        .HasColumnName("DateHourRegister");

                    b.Property<long>("SignataryDocumentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SignataryDocumentId")
                        .IsUnique();

                    b.ToTable("Signature", (string)null);
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Event", b =>
                {
                    b.HasOne("Digital_Accept.Domain.Entities.Document", "Document")
                        .WithMany("Events")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document_Event_DocumentId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.SignataryDocument", b =>
                {
                    b.HasOne("Digital_Accept.Domain.Entities.Document", "Document")
                        .WithMany("SignatariesDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document_SignataryDocument_DocumentId");

                    b.HasOne("Digital_Accept.Domain.Entities.Signatary", "Signatary")
                        .WithMany("SignatariesDocuments")
                        .HasForeignKey("SignataryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Signatary_SignataryDocument_SignataryId");

                    b.Navigation("Document");

                    b.Navigation("Signatary");
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Signature", b =>
                {
                    b.HasOne("Digital_Accept.Domain.Entities.SignataryDocument", "SignataryDocument")
                        .WithOne("Signature")
                        .HasForeignKey("Digital_Accept.Domain.Entities.Signature", "SignataryDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SignataryDocument_Signature_SignataryDocumentId");

                    b.Navigation("SignataryDocument");
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Document", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("SignatariesDocuments");
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.Signatary", b =>
                {
                    b.Navigation("SignatariesDocuments");
                });

            modelBuilder.Entity("Digital_Accept.Domain.Entities.SignataryDocument", b =>
                {
                    b.Navigation("Signature")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
